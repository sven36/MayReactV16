function karatsuba(num1, num2) { //by 司徒正美
    if (num1.length == 1 || num2.length == 1) {
        //第1步 处理最简单的情况
        var s = multiply(num1, num2);
        // console.log("简单乘法:", num1, '*', num2, '=', s , s === (num1 * num2)+"")
        return s
    }
    //old1, old2 调试有

    var old1 = num1,
        old2 = num2
        ///第2步 将两个传参的长度补成相同的长度，用diffLen记录最后一步要减去的0
    var diffLen = num1.length - num2.length
    if (diffLen !== 0) {
        if (diffLen < 0) {
            diffLen = -1 * diffLen
            num1 = pad(num1, diffLen)
        } else {
            num2 = pad(num2, diffLen)
        }
        // console.log("diffLen", diffLen, num1, num2)
    }

    //第3步  拆分成更少的两个数，方便继续递归调用karatsuba算法
    //a, c分别存num1, num2的高半部分，b, d分别存num1, num2的低半部分
    //如果num1或num2的长为奇数，那么保证a,c的长度大于b, d
    //z1 表示拆分后a会跟着z1个零（z-> zero）
    //z2 表示拆分后c会跟着z2个零（z-> zero）
    var m = num1.length
    var [a, b, z1] = splitNumber(num1); // a.length >= b.length
    var [c, d, z2] = splitNumber(num2); // c.length >= d.length
    // console.log(num1 + "与" + num2 + "拆分成", a, b, c, d)
    //第4步  三次递归调用karatsuba算法
    var a_c = karatsuba(a, c);
    var b_d = karatsuba(b, d);
    var ab_cd = karatsuba(add(a, b), add(c, d));
    var diff = subtract(subtract(ab_cd, a_c), b_d);
    //第5步， 对a_c，diff 进行补零，然后相加
    var s1 = pad(a_c, z1 + z2);
    var s2 = pad(diff, (z1 + z2) >> 1)
    var s = add(add(s1, s2), b_d);
    //第6步， 去掉第2步补上的零
    if (diffLen) {
        s = s.slice(0, s.length - diffLen)
    }
    // console.log('s1,s2,s3:',a_c, diff, b_d)
    console.log("karatsuba", old1, '*', old2, '=', s, s === old1 * old2 + "");
    return s //by 司徒正美
}

function splitNumber(str) {
    //如果是奇数，那么我们要加1, 这样就确保返回的数组的第一个元素的值比大
    //让我们在接着下来的减法运算中，不会返回负数
    var len = str.length;
    var mid = len >> 1
    mid = len % 2 == 1 ? mid + 1 : mid;
    //第二个数的开头可能是零，不合法
    return [str.slice(0, mid), trimZero(str.slice(mid)), len - mid]; //需要补多少零
}

function splitNumber2(str, mid) {
    return [str.slice(0, mid), trimZero(str.slice(mid))]; //需要补多少零
}
//实现一个简单的乘法，有一方必须是一位数, 不考虑负数 by 司徒正美
function multiply(num1, num2) {
    if ("0" === num1 || "0" === num2) {
        return "0";
    }
    if ("1" === num1) {
        return num2;
    }
    if ("1" === num2) {
        return num1;
    }
    var longNumber, shortNumber;
    if (num1.length == 1) {
        longNumber = num2;
        shortNumber = num1 * 1; //转换为数字
    } else {
        longNumber = num1;
        shortNumber = num2 * 1; //转换为数字
    }
    var ret = "",
        carry = 0; //进位
    for (var i = longNumber.length - 1; i >= 0; i--) {
        var num = longNumber[i] * 1
        var temp = num * shortNumber + carry
        ret = temp % 10 + '' + ret;
        carry = Math.trunc(temp / 10);
    }
    if (carry > 0) {
        ret = carry + '' + ret;
    }
    return ret;
}

//相当于为它乘以 Math.pow(10, len)
function pad(num, len) {
    if (num == "0") {
        return num;
    }
    for (var i = 0; i < len; i++) {
        num += "0";
    }
    return num;
}

function trimZero(str) {
    while (str[0] === '0') {
        str = str.slice(1)
    }
    return str || "0"
}

function add(num1, num2) {
    if (num2[0] === '-') {
        return subtract(num1, num2.slice(1))
    }
    var a, b; //a的长度较长
    if (num1.length >= num2.length) {
        a = num1;
        b = num2;
    } else {
        a = num2;
        b = num1;
    }

    var ret = '',
        carry = 0,
        diff = a.length - b.length;
    for (var i = a.length - 1; i >= 0; i--) {
        var addend = a.charAt(i) * 1; //加数
        var adder = i - diff < 0 ? 0 : b.charAt(i - diff) * 1; //被加数
        var temp = addend + adder + carry;
        ret = temp % 10 + '' + ret;
        carry = Math.trunc(temp / 10);
    }
    if (carry > 0) {
        ret = carry + '' + ret;
    }
    //  console.log("简单加法:", num1, '+', num2, '=', ret, '!')
    return ret;
}

function subtract(num1, num2) { //减法，小心负号 by 司徒正美
    //console.log(num1, num2)
    if (num2[0] === '-') {
        return add(num1, num2.slice(1))
    }
    if (num1[0] === '-') {
        return '-' + add(num1.slice(1), num2)
    }
    var len1 = num1.length;
    var len2 = num2.length;
    var negative = false;
    // 相等
    if (num1 == num2) {
        return "0";
    }
    var a = null, //bigNumber
        b = null; //smallNumber
    //先确定谁大谁少
    if (len1 > len2) {
        a = num1;
        b = num2;
    } else if (len1 < len2) {
        a = num2;
        b = num1;
        negative = true
    } else {
        for (var i = 0; i < len1; i++) {
            if (num1[i] * 1 > num2[i] * 1) {
                a = num1;
                b = num2;
                break;
            } else if (num2[i] * 1 > num1[i] * 1) {
                a = num2;
                b = num1;
                negative = true
                break;
            }
        }
    }
    var carry = 0,
        ret = '',
        diff = a.length - b.length;
    for (var i = a.length - 1; i >= 0; i--) {
        var subtrahend = a.charAt(i) * 1;
        var subtractor = i - diff < 0 ? 0 : b.charAt(i - diff) * 1;
        var temp = subtrahend - subtractor - carry;
        if (temp < 0) {
            temp += 10;
            carry = 1;
        } else {
            carry = 0;
        }
        ret = temp + '' + ret;
    }
    while (ret[0] === '0') {
        ret = ret.slice(1)
    }
    ret = trimZero(ret)
    if (negative) {
        ret = '-' + ret;
    }
    // console.log("简单减法:", num1, '-', num2, '=', ret,  (num1 - num2)+"" == ret)
    return ret
}