import React from "../../ReactWX.js";
import Requester from './requester/requester.js';
import util from './util';

const emptyFunc = () => {};

function request(obj) {
  const initUserData = React.api.getStorageSync('UserData');
  quickRequest(obj, initUserData);
}

function setResponseCookid(res, initUserData) {
  if (!res.header) return;
  const setCookie = res.header['Set-Cookie'] || res.header['set-cookie'];
  let setCookieString = '';
  if (!setCookie) return;

  if (Array.isArray(setCookie)) {
    setCookie.forEach(v => {
      setCookieString = setCookieString + v + ';';
    });
    setCookieString = setCookieString.replace(/\s+/g, '');
  } else if (typeof setCookie === 'string') {
    setCookieString = setCookie.replace(/\s+/g, '');
  }

  const setCookieObj = util.queryToCookie(setCookieString);
  const oldSetCookieObj = initUserData.extraCookie || {};

  for (let k in setCookieObj) {
    oldSetCookieObj[k] = setCookieObj[k];
  }

  React.api.setStorageSync('UserData', {
    cookies: initUserData.cookies,
    user: initUserData.user,
    extraCookie: oldSetCookieObj
  });
}

function quickRequest(obj, initUserData) {
  const originalSuccessCb = obj.success || emptyFunc;
  const originalFailCb = obj.fail || emptyFunc;
  const originalCompleteCb = obj.complete || emptyFunc;
  obj.header || (obj.header = {});
  const extraCookie = initUserData.extraCookie || {};
  const cookie = [];

  for (const name in initUserData.cookies) {
    cookie.push(name + "=" + initUserData.cookies[name]);
  }

  for (const name in extraCookie) {
    cookie.push(name + "=" + extraCookie[name]);
  }

  obj.header.cookie = cookie.join(';');

  const finalFailCb = (res, isNetworkError = true) => {
    originalFailCb(res);
  };

  obj.success = res => {
    setResponseCookid(res, initUserData);
    const {
      data
    } = res;

    if (obj.returnAll) {
      originalSuccessCb(res);
      return;
    }

    if (obj.ignoreStatus) {
      originalSuccessCb(data);
    } else {
      if (data.status === 0 || data.errcode === 0 || data.ret) {
        originalSuccessCb(data);
      } else {
        finalFailCb(data, false);
      }
    }
  };

  obj.fail = finalFailCb;

  obj.complete = () => {
    originalCompleteCb();
  };

  Requester(obj, initUserData);
}

export default request;