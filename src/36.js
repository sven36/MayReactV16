/*
 * @lc app=leetcode.cn id=36 lang=javascript
 *
 * [36] 有效的数独
 *
 * https://leetcode-cn.com/problems/valid-sudoku/description/
 *
 * algorithms
 * Medium (56.60%)
 * Likes:    215
 * Dislikes: 0
 * Total Accepted:    41.9K
 * Total Submissions: 73.9K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * 
 * 
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * 
 * 
 * 
 * 
 * 上图是一个部分填充的有效的数独。
 * 
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 示例 1:
 * 
 * 输入:
 * [
 * ⁠ ["5","3",".",".","7",".",".",".","."],
 * ⁠ ["6",".",".","1","9","5",".",".","."],
 * ⁠ [".","9","8",".",".",".",".","6","."],
 * ⁠ ["8",".",".",".","6",".",".",".","3"],
 * ⁠ ["4",".",".","8",".","3",".",".","1"],
 * ⁠ ["7",".",".",".","2",".",".",".","6"],
 * ⁠ [".","6",".",".",".",".","2","8","."],
 * ⁠ [".",".",".","4","1","9",".",".","5"],
 * ⁠ [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 
 * 
 * 示例 2:
 * 
 * 输入:
 * [
 * ["8","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * ⁠    但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 
 * 说明:
 * 
 * 
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 * 
 * 
 */

// @lc code=start
/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function (board) {
    let numObj = {};
    let res = true;
    for (let i = 0; i < board.length; i++) {
        const arr = board[i];
        for (let j = 0; j < arr.length; j++) {
            const char = arr[j];
            if (char !== '.') {
                if (!numObj[char]) {
                    numObj[char] = [{ i, j }];
                } else {
                    res = numObj[char].every(obj => {
                        if (obj.i === i || obj.j === j) {
                            return false;
                        }
                        if (Math.abs((i - obj.i)) <= 2 && Math.abs((j - obj.j)) <= 2) {
                            let isBlock = 1;
                            for (let m = 1; m <= 3; m++) {
                                //2,5,8
                                const count = m * 3 - 1;
                                let l = i <= count && obj.i <= count && i >= (count - 2) && obj.i >= (count - 2);
                                let r = j <= count && obj.j <= count && j >= (count - 2) && obj.j >= (count - 2);
                                if (l) {
                                    isBlock += 1;
                                }
                                if (r) {
                                    isBlock += 1;
                                }
                            }
                            if (isBlock === 3) {
                                return false;
                            }
                        }
                        return true;
                    });
                    if (!res) {
                        return res;
                    }
                    numObj[char].push({ i, j });
                }
            }
        }
    }
        //二进制存储，输入值对应于索引位置的值1，用移位操作设值
	// var row = [0,0,0,0,0,0,0,0,0], col = [0,0,0,0,0,0,0,0,0], box = [0,0,0,0,0,0,0,0,0];
	// for (var i = 0; i < 9; i++) {
	// 	for (var j = 0; j < 9; j++) {
	// 		if (chars[i][j] == '.') continue;
	// 		//数和框
	// 		var num = chars[i][j].charCodeAt(0) - 48, boxNum = (i - i % 3) / 3 * 3 + (j - j % 3) / 3;
	// 		//处理行
	// 		if ((row[i] >> num & 1) != 0) return false; else row[i] += 1 << num;
	// 		//处理列
	// 		if ((col[j] >> num & 1) != 0) return false; else col[j] += 1 << num;
	// 		//处理框
	// 		if ((box[boxNum] >> num & 1) != 0) return false; else box[boxNum] += 1 << num;
	// 	}
	// }
	// return true;
    return res;
};
// let tes = [
//     [".", ".", ".", ".", "5", ".", ".", "1", "."],
//     [".", "4", ".", "3", ".", ".", ".", ".", "."],
//     [".", ".", ".", ".", ".", "3", ".", ".", "1"],
//     ["8", ".", ".", ".", ".", ".", ".", "2", "."],
//     [".", ".", "2", ".", "7", ".", ".", ".", "."],
//     [".", "1", "5", ".", ".", ".", ".", ".", "."],
//     [".", ".", ".", ".", ".", "2", ".", ".", "."],
//     [".", "2", ".", "9", ".", ".", ".", ".", "."],
//     [".", ".", "4", ".", ".", ".", ".", ".", "."]
// ];
// isValidSudoku(tes);
// @lc code=end

